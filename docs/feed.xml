<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Wed, 21 Jul 2021 11:25:00 +0000</lastBuildDate>
        
        <item>
            <title>Quarkus ニュースレター #10</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-10/
            </link>
            <description>
                
前回のニュースレターからしばらく経ってしまいましたが、私たちは新しいフォーマットを作るために忙しくしていました。10号からはメール購読モデルに移行しました。私たちの目標は、登録していただければ、月に一度、最高の記事をメールでお届けできるようにすることです。


ニュースレター #10をご覧ください。


ニュースレターを受信してみませんか？ページ上のフォームを使って
ニュースレターに登録 してください。


また、最新のオンラインストーリーのリストも掲載されています。読んでみて、何か足りないと感じたり、今後のQuarkus
Newsletterに掲載予定の記事がある場合は、ノートパソコンや携帯電話に
ブックマークレットをインストールすると、簡単に記事を投稿することができます。手動での投稿をご希望の場合は、簡単な説明とURLを入力して
課題を開いてください。

            </description>
            <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-10/
            </guid>
        </item>
        
        <item>
            <title>Quarkus 2.0.2.Final リリース - メンテナンスリリース</title>
            <link>
                https://quarkus.io/blog/quarkus-2-0-2-final-released/
            </link>
            <description>
                
Quarkus 2.0.2.Finalをリリースしたのは、対称性を重視したためです（そして多くのバグフィックスもあった為です）。


これは、すでに2.0を使用している人には安全なアップグレードです。


まだ2.0をお使いでない方は、
2.0移行ガイドをご参照ください。


完全な変更履歴


2.0.2.Finalの完全な変更履歴はGitHub
に掲載されています。




参加のお誘い


私達は皆様からのフィードバックに重きを置いています。バグ報告、改善要望を是非お願いします。一緒に素晴らしいものを作り上げていきましょう!


Quarkusユーザーの場合でも、単に興味を持っているだけの場合でも、恥ずかしがらずにコミュニティに参加して下さい!:




GitHub でフィードバック


コードを作成し、 プルリクエスト を送信


Zulip や
メーリングリスト でディスカッションに参加


Stack Overflow で質問





            </description>
            <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-2-0-2-final-released/
            </guid>
        </item>
        
        <item>
            <title>Quarkus 2.0.1.Final リリース - メンテナンスリリース</title>
            <link>
                https://quarkus.io/blog/quarkus-2-0-1-final-released/
            </link>
            <description>
                
Quarkus 2.0.1.Finalをリリースしました。


すでに2.0.0.Finalをお使いの方も安心してアップグレードできます。


まだ2.0をお使いでない方は、
2.0移行ガイドをご参照ください。


完全な変更履歴


2.0.1.Finalの完全な変更履歴はGitHub
に掲載されています。




参加のお誘い


私達は皆様からのフィードバックに重きを置いています。バグ報告、改善要望を是非お願いします。一緒に素晴らしいものを作り上げていきましょう!


Quarkusユーザーの場合でも、単に興味を持っているだけの場合でも、恥ずかしがらずにコミュニティに参加して下さい!:




GitHub でフィードバック


コードを作成し、 プルリクエスト を送信


Zulip や
メーリングリスト でディスカッションに参加


Stack Overflow で質問





            </description>
            <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-2-0-1-final-released/
            </guid>
        </item>
        
        <item>
            <title>Quarkus 2.0.0.Finalリリース - Vert.x 4、MicroProfile 4、継続的テストなど多数</title>
            <link>
                https://quarkus.io/blog/quarkus-2-0-0-final-released/
            </link>
            <description>
                Quarkusチームは、Quarkus 2.0のファイナルリリースを発表しました。 このバージョンは、Quarkusのルーツである高速起動、低メモリ使用、開発者満足度を維持しつつ、Quarkusを全く新しいレベルに引き上げるための巨大な努力がなされました。 コミュニティに参加してくださった皆様、コントリビューターの皆様、テスターの皆様、本当にありがとうございました。このバージョンはチームの努力の賜物であり、皆様のおかげで素晴らしいものになりました。 移行ガイド 良いニュースとしては、Quarkus 2.0へのアップグレードは非常に簡単で、いつものように 移行ガイドを用意しています。 この新しいバージョンにアップグレードする際に問題が発生した場合は、報告していただければ、修正するか、ガイドに情報を追加します。 変更点 このバージョンの新しさは、すでにAlphas/CRの発表で紹介していますが、ここではその内容をまとめてみました。 また、今週のQuarkus Insights Quarkus 2.0 Launch Party で、複数のQuarkusコントリビューターが新機能について語っていますので、ご覧ください。 JDK 11が最小バージョン JDK 11が、Quarkus 2.0を使用するための最小バージョンになりました。 JDK 8はもうサポートされていません（ただし、1.13.xにこだわっている方は使い続けることができます！）。 GraalVM 21.1 GraalVM 21.1は、Quarkus 2.0の推奨バージョンです。 Vert.x 4 Vert.xはQuarkusの中核です。 Quarkus 2.0はVert.x 4を搭載しています。詳細は アナウンスと 変更点のブログ記事でご覧いただけます。 Eclipse MicroProfile 4 MicroProfile 4は、 MicroProfile仕様の最新版です。 QuarkusのSmallRyeコンポーネントはすべて最新のものにアップデートされており、MicroProfile 4を実装しているだけでなく、追加の新機能も搭載されています。 継続的テスト この素晴らしい新機能を開発したのはStuart Douglas氏なので、彼にお任せします。 このリリースには、開発者の生産性を向上させる全く新しい機能が含まれています。継続的テストです。この機能は、開発モードでテストを自動的に実行できるようにするもので、コンソール（または...
            </description>
            <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-2-0-0-final-released/
            </guid>
        </item>
        
        <item>
            <title>アプリケーションをOpenShiftに展開するためにQuarkusはどのように使用されてきたか</title>
            <link>
                https://quarkus.io/blog/quarkus-deploys-apps-on-openshift/
            </link>
            <description>
                この記事では、Kubernetes上でのアプリケーションのデプロイに関して、私が仕事上で直面している特定の課題について、Quarkusを使ってどのように目標を達成するソリューションを提供できたかについてフィードバックします。 チャレンジ 数年前から、私はKubernetesのプロジェクトに参加しています。 新しい技術（アプリケーション・フレームワークやミドルウェア製品）をより簡単に、より早く導入する。 アンブレラチャートパターンのように、サービスの上に論理的な展開の抽象化を行うことで、相互に関連する分散型サービスを展開する際の管理負担を軽減する。 アプリケーションチームがコンポーネントをデプロイするために必要な作業を限定し、Kubernetesのデプロイメントオブジェクトを超標準化する。 ハイブリッドクラウドのデプロイモデルへの移行 これらの目標に加えて、アプリケーションがテナントごとにデプロイされるという事実に関連した制約がありました（つまり、規制に関連した理由もありますが、マルチテナントではありません）。アプリケーションによっては、数十のテナントが存在する可能性があり、その場合、テナントごとにアプリケーションを1回デプロイすることになります（つまり、あるアプリケーションに10のテナントがあった場合、本番では10のプロセスが実行されることになります）。しかし、物理的にプロセスを分離する必要がある場合は、異なるビジネスルールに基づいて、一部のテナント、IT環境、地理的ゾーンの間で、設定の一部を共有することができます。高度に単純化、因数分解された構成部分は、開発チームにとっては真の意味での単純さの源となり、デプロイメントプロセスにとっては真の意味での複雑さの源となります。 プロジェクト終了時には、さまざまなクラスターで10,000個のポッドが含まれているという予測もありました。 最初の試み その複雑さを考慮して、私たちは設定とデプロイのための独自のツールを作成しました。最初のバージョンはAnsibleをベースにしたもので、Towerのワークフローに対応していました。さまざまな理由から、1年前にJavaで書き直すことにしました。主な理由は: パフォーマンスの向上 アルゴリズムの複雑さに対応できる高レベルの言語の使用 ユニットテストや統合テストの充実したサポート 高品質な開発ツール（IDEなど）による生産性の向上 しかし、一つ気になったのは、メモリ消費量、CPU使用率、起動時間でした。というのも、あるアプリケーションでは、各テナントがそれぞれのデプロイメントプロセスで独立してデプロイされるからです。というのも、アプリケーションフレームワークは生産性や標準化の面では優れていますが、抽象化の面ではリソースコストがかかるからです。そのため、プログラムはプレーンなJavaで書かれており、サイズもユースケースも十分に小さかったので、クリーンなコードのためにいくつかのパターン（例：コンストラクタベースのインジェクションを手作業で行う）に頼ることを条件に、それで済ませることができました。このプログラムは ocpdeploy といいます。 Tower からの移行に伴い、Tekton パイプラインのタスクとして _ocpdeploy_を実行することで、Kubernetes インフラストラクチャを活用することにしました。これにより、再現性が得られ、異なるアプリケーションや、同じアプリケーションの異なるテナントを異なる _ocpdeploy_バージョンでデプロイすることができました。java (他のハイレベル言語でも可) を使用することで、設定処理のための複雑なアルゴリズムを実装することができる一方で、高いレベルの生産性と保守可能なコードを提供し、広範なリグレッション・テスト・スイートのおかげで _ocpdeploy_のリリースの品質レベルが向上しました。 全てが順調だったのは、複数のテナントを同時にデプロイしたり、異なるアプリケーションをデプロイするようになるまでです。 _ocpdeploy_コンテナのサイズは 200 millicores 、RAMは 280 Mb でした。いくつかのアプリケーションでは、約30のテナントがあり、それらはすべて並行してデプロイされます。これは30ポッドを意味し、 6 cores と 8 Gb のRAMを占めていました。しかし、デプロイは多くの場合、営業時間後の午後7時から8時の間に行われることが多いのです。また、起動時にクラスタに負担をかけるSpringBootやWildFlyのアプリケーションに加えて、複数のデプロイを並行して実行する場合、 _ocpdeploy_自体が受ける影響を心配し始めました。 Quarkus Universeへの参加 1年前、私たちは _Ocpdeploy_でQuarkusのPOCを開始することにしました。その目的は、QuarkusをGraalVMの実行ファイルとしてデプロイすることでした。遭遇した主な課題は、使用していたいくつかのライブラリでGraalVMがサポートされていないことに関連していました。FreeMarker、 SMBJ（Server Message Block SMB2およびSMB3プロトコルを実装したJavaクライアントライブラリ）、Fabric8...
            </description>
            <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-deploys-apps-on-openshift/
            </guid>
        </item>
        
        <item>
            <title>Quarkus ワールド・ツアーのローディーを大募集</title>
            <link>
                https://quarkus.io/blog/calling-all-roadies/
            </link>
            <description>
                Quarkus World Tourは、世界中のJava開発者にQuarkusのユニークな実地体験を提供するために、3月にスタートしました。このツアーの目的は、Java開発者にQuarkusを紹介し、アプリケーションの作成やコミュニティへの参加への道筋をつけることです。 このツアーが始まって以来、私たちは世界中の 15以上の JUGから集まった大勢の開発者を前にパフォーマンスを行ってきましたが、毎日多くの ツアー会場が追加されています。 Bands Make It “Rock”, Roadies Make It “Roll” グローバルなワールドツアーを成功させるには、コミュニティ全体が必要です。これまでワールドツアーを成功させてきた素晴らしいローディたちがいますが、皆さんの協力が必要です。 協力できること コンサートのように、それぞれのツアー先でお客様にユニークな体験をしていただきたいと思っています。各パフォーマーは、自分がQuarkusで情熱を傾けていることをデモしたり、話したりすることができます。専門家である必要はあり ません し、Quarkusのすべてを知っている必要もありません。イベント主催者は、事前に参加者と協力してアジェンダを設定し、デモのセットリストを作成しますので、準備に時間をかけることができます（下記のサンプルセットリストを参照）。楽しいイベントになることをお約束します。 以下の役柄で出演者を募集しています。 MC （キックオフ、デモの移行、チャットや質問のモニターなど プレゼンター （任意のQuarkusの機能／性能をデモする Q&amp;A （チャットを監視し、舞台裏やライブで質問に答える オーガナイザー （ロジスティックス、アジェンダ、JUGコミュニケーションなどの手配の手伝い） また、素敵なグッズがもらえることもお伝えしましたか？ サインアップ、または メールでお問い合わせください。 ワールド・ツアー・ストップを確認 サンプルセットリスト ここでは、あるツアーのセットリストの例をご紹介します。 Quarkusの紹介（5～10分 ステージ設定、なぜQuarkusが必要なのか デモ1 - Hello, World! デモ2 - デベロッパーツールと生産性 デモ3 - JVMとNativeのパフォーマンス統計 テイクリクエスト - オープンエンド...
            </description>
            <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/calling-all-roadies/
            </guid>
        </item>
        
        <item>
            <title>Abraxasが最先端の税務アプリにQuarkusを採用</title>
            <link>
                https://quarkus.io/blog/abraxas-customer-story/
            </link>
            <description>
                開発者の人生には確かなことが2つあります。Javaと税金です。 過去25年間にわたって、Javaはエンタープライズアプリケーションを作成する開発者にとって圧倒的なフレームワークとなっています。その間、開発者は税金を払って、それぞれのコミュニティや国を支え続けてきました。 Javaと税金の共通点とは？Java、特にQuarkusは、 Abraxas Informatik AGが開発したスイス政府の税務機関を対象とした新しく革新的な税務ソリューションのバックボーンとなっています。Quarkusによって、Javaベースの税務アプリケーションの開発は、開発チームにとってエキサイティングで革新的なものになりました。 Quarkusがどのようにして税務アプリケーションの作成を、開発者にとってエキサイティングでやりがいのあるプロジェクトに変えたのか、もう少し詳しく見てみましょう。 チャレンジ Abraxas社は、スイスの公共部門向けに統合ITソリューションを提供する最大手の企業です。Abraxas社は、スイスの州や市町村が税法を施行する際に使用できる、モジュール式のクラウド・ネイティブな税務ソリューションを新たに開発するという戦略的な決断を下しました。各州や市町村は、市民への課税に関する規則や要件が異なるため、チームには独自の課題がありました。 Abraxas は、税務ソリューションを設計、開発、展開するために、専門家のグループ（チームポラリス）を結成しました。ポラリスチームは、大規模な組織の一部ではありますが、スタートアップに近い形で活動しています。このチームは、お客様のニーズを満たすために、最適なテクノロジーを見極め、導入することができました。 Abraxasは「クラウドファースト」戦略で製品を開発しており、税務アプリケーションはブラウザベースのクラスター化されたスケーラブルでセキュアな環境に展開される必要があります。Abraxasは、Kubernetesベースのクラウドソリューションを顧客に提供している自社のクラウドプラットフォーム「Abraxas Government Cloud」を活用することができました。 ソリューション この税務アプリケーションは、国内のさまざまな州や市町村で使用できるように、クラウドネイティブで柔軟性に富んでいます。Quarkusは、他のJavaフレームワークやプラットフォームと比較して分析され、パフォーマンス、効率性、Kubernetes環境での開発者の生産性が評価され、このアプリケーションのバックボーンとして選ばれました。 アーキテクチャ 州や市町村などのお客様は、それぞれ独自の要件やニーズをお持ちです。そのため、お客様ごとにクラスター化されたKubernetes環境を用意し、それぞれのニーズに合わせて設定できるようにしています。 税務アプリケーションは、コンテナ化されたマイクロサービスアーキテクチャをベースに、ビジネスニーズに応じて各サービスが分割されています。これにより、必要に応じて開発チームがサービスを異なるビジネスロジックに簡単に置き換えることができるという利点があります。 チームポラリスは、プライベートクラウド（オンプレミス）やホステッドクラウド環境での展開を含め、各顧客に柔軟な配信環境を提供しています。Abraxasのプラットフォームチームは、お客様の要件に応じてクラウドインフラストラクチャを準備します。開発チームは、カスタマイズされた環境を構成して、アプリケーションを展開することができます。税務ソリューションは現在、開発段階にあり、開発環境とステージング環境の両方で稼働しています。 このアプリケーションでは、以下のような様々なQuarkusのエクステンションが利用されています。 PostgreSQL Hibernate/ORM Flyway Cache RESTEasy (Jackson) REST Client (Jackson) Kafka (Reactive Messaging) Health Metrics (Micrometer) OpenAPI/Swagger OpenTracing スケジューラー フォールトトレランス さらに、チームはテスト用に以下のような多数のQuarkusエクステンションも活用しています。 Junit5 + Mockito Test H2 インメモリ・リアクティブ・メッセージング Jacoco なぜQuarkusなのか？ Quarkusは、Spring...
            </description>
            <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/abraxas-customer-story/
            </guid>
        </item>
        
        <item>
            <title>Quarkus 1.13.7.Final リリース - メンテナンスリリース</title>
            <link>
                https://quarkus.io/blog/quarkus-1-13-7-final-released/
            </link>
            <description>
                
1.13リリースのための（おそらく！）最後のバグフィックスである1.13.7.Finalがやって来ました
。


まだ1.13を使用していない場合は、
1.13移行ガイドを参照してください。


完全な変更履歴


1.13.7.Finalの完全な変更履歴はGitHub
に掲載されています。




2.0が間もなく登場


もうすぐQuarkus 2.0.0.Finalで新しい章が始まります。今月末にはリリースされる予定です。


詳細は
アナウンスをご覧ください。


最新の2.0.0.CR3でアプリケーションをテストして、報告してください。




参加のお誘い


私達は皆様からのフィードバックに重きを置いています。バグ報告、改善要望を是非お願いします。一緒に素晴らしいものを作り上げていきましょう!


Quarkusユーザーの場合でも、単に興味を持っているだけの場合でも、恥ずかしがらずにコミュニティに参加して下さい!:




GitHub でフィードバック


コードを作成し、 プルリクエスト を送信


Zulip や
メーリングリスト でディスカッションに参加


Stack Overflow で質問





            </description>
            <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-1-13-7-final-released/
            </guid>
        </item>
        
        <item>
            <title>Quarkus 2.0.0.CR3リリース - Finalに向けて</title>
            <link>
                https://quarkus.io/blog/quarkus-2-0-0-cr3-released/
            </link>
            <description>
                
フィードバックのお陰で、Quarkus 2.0ではさらにいくつかの問題を修正し、新しいCRが必要だと考えました。


いつものように、ドキュメントの改善も施されています。


6月23日に最終アーティファクトを作成しますので、フィードバックをお待ちしています。


移行ガイド


最新のマイグレーションガイドはこちらです:
https://github.com/quarkusio/quarkus/wiki/Migration-Guide-2.0.




Jandexアップグレード


アプリケーションでJandex MavenプラグインやJandex Gradleプラグインを使用している場合は、それらをアップデートする必要があります。


詳細は
移行ガイドをご参照ください。




ドキュメント


main ブランチのドキュメントは ウェブサイト で公開されています。


完全な変更履歴

2.0.0.CR3の完全な変更履歴はGitHubに掲載されています。





参加のお誘い


私達は皆様からのフィードバックに重きを置いています。バグ報告、改善要望を是非お願いします。一緒に素晴らしいものを作り上げていきましょう!


Quarkusユーザーの場合でも、単に興味を持っているだけの場合でも、恥ずかしがらずにコミュニティに参加して下さい!:




GitHub でフィードバック


コードを作成し、 プルリクエスト を送信


Zulip や
メーリングリスト でディスカッションに参加


Stack Overflow で質問





            </description>
            <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-2-0-0-cr3-released/
            </guid>
        </item>
        
        <item>
            <title>Quarkus 2のリリース間近 - 何でも聞いてください!</title>
            <link>
                https://quarkus.io/blog/quarkus-insights-qanda2/
            </link>
            <description>
                
Quarkus 2のリリースが近づき、Quarkus Insightsのエピソードが50回を超えたので、今年の初めに行ったのと同じようなQ&amp;A
エピソードを行いたいと思います。


私たちは、これまでによく見られた質問や、私たちの様々なソーシャルメディア
Twitter、
Facebook、
LinkedIn
上で #quarkusinsights とタグ付けされた質問を取り上げます。


Quarkusについて質問がある場合は、 quarkusinsights をタグとして使用して、いずれかのサイトで教えていただきたいと思います。

            </description>
            <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-insights-qanda2/
            </guid>
        </item>
        
    </channel>
</rss>
